##参考URL
[参考URL](http://dackdive.hateblo.jp/entry/2016/03/11/094501)

##動作環境
・OS X
・Vagrant 1.8.1
・Ansible 2.0.0.2
・Python 2.7.10
・Virtualbox 5.0.10
・pywinrm 0.1.1

##VagrantとAnsibleのインストール方法
以下のコードでインストールできる

```
# Vagrant
$ brew tap caskroom/cask
$ brew cask install virtualbox
$ brew cask install vagrant

# Ansible
$ brew install python
$ pip install ansible==2.0.0.2
$ pip install winrm
```

##vagrantとAnsibleの連携
Ansibleとは特定の環境のセットアップを自動化するツール
Vagrantfile内に以下を記述

```
config.vm.provision "ansible" do |ansible|
  ansible.playbook = "playbook.yml"
end
```

##Windows10のboxファイルダウンロード
[下記サイト](https://atlas.hashicorp.com/boxes/search?utf8=%E2%9C%93&sort=&provider=virtualbox&q=windows)

でダウンロードできる。
[vagrantbox.es](http://www.vagrantbox.es/)には8.1までしかない

ダウンロードするコードは以下の通り

```
$ vagrant box add (box名) https://atlas.hashicorp.com/boxes/search?utf8=%E2%9C%93&sort=&provider=virtualbox&q=windows
==> box: Loading metadata for box 'modernIE/w10-edge'
    box: URL: https://atlas.hashicorp.com/modernIE/w10-edge
==> box: Adding box 'modernIE/w10-edge' (v0.0.3) for provider: virtualbox
    box: Downloading: https://atlas.hashicorp.com/modernIE/boxes/w10-edge/versions/0.0.3/providers/virtualbox.box
    box: Progress: 19% (Rate: 5346k/s, Estimated time remaining: 0:15:49)

#以下のコードで確認できる
$ vagrant box list
box名
```

##Vagrantfileのセットアップ
`vagrant init`でVagrantfileが生成される。以下のようにコメントアウトを外す。

```
# Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  config.vm.provider "virtualbox" do |vb|
    # 起動時に自動的に GUI を表示する場合はコメントを外す
    # (起動が遅くなる気がする)
    # vb.gui = true

    # Virtualbox に表示される名前(なんでも良い)
    vb.name = "vagrant-win10"

    # メモリ
    vb.memory = "1024"
    # クリップボードの共有: 双方向
    vb.customize ["modifyvm", :id, "--clipboard", "bidirectional"]
    # ビデオメモリー(MB)
    vb.customize ["modifyvm", :id, "--vram"  , "128"]
  end
```
これ以外の設定項目は以下のサイトを参考にする
[Configuration-VirtualBoxProvider-Vagrant by HashiCorp](https://www.vagrantup.com/docs/virtualbox/configuration.html)

書き方の設定は以下のサイトを参考にする
[Chapter8. VBoxManage](https://www.virtualbox.org/manual/ch08.html)
ゲストOSはwindowsなので`config.vm.box`のすぐ下に以下のコードを記述

```
Vagrant.configure(2) do |config|
  ...(略)...
  config.vm.guest = :windows
  config.vm.communicator = :winrm
  ...
```

`config.vm.communicator`はゲストOSとの接続方法を指定するものでWindowsの場合は`winrm`で接続する。
参考URL[config.vm-Vagrantfile-Vagrant by HashiCorp](https://www.vagrantup.com/docs/vagrantfile/machine_settings.html)

##ネットワーク設定
以下となるようにコメントアウトを外す

```
# Create a private network, which allows host-only access to the machine
# using a specific IP.
config.vm.network "private_network", ip: "192.168.33.10"
```

ポートフォワーディングについては以下のコード

```
config.vm.network "forwarded_port", guest: 3389, host: 3389
config.vm.network "forwarded_port", guest: 5985, host: 55985, id: "winrm", auto_correct: true
```

で設定することができるが、特に設定しなくてもデフォルトで設定されているはず。。。
virtual_boxのアプリGUIでネットワークの欄から調べることができる

##Ansibleの設定
###inventory file
ファイル名はなんでもいい。Vagrantfileと同じ場所におく

```
[windows]
192.168.33.10

[windows:vars]
ansible_user=IEUser
ansible_password=Passw0rd!
# ansible_port=5986
ansible_connection=winrm
# The following is necessary for Python 2.7.9+ when using default WinRM self-signed certificates:
ansible_winrm_server_cert_validation=ignore
```

###playbook
`hosts`で対象を指定し、`tasks`で実行したいタスクを書き並べればいいぐらいのイメージ。
[Windows用のモジュール一覧](http://docs.ansible.com/ansible/list_of_windows_modules.html)

playbook.ymlというファイルを作り、vagrantfile,hostsと同じところにおけばいい
Git,TortoiseSVN,Notepad++をインストールさせるplaybook.ymlの具体例は下図

```
- hosts: windows
  tasks:
  - name: Install git
    win_chocolatey:
      name: git
  - name: Install tortoisesvn
    win_chocolatey:
      name: tortoisesvn
  - name: Install Notepad++
    win_chocolatey:
      name: notepadplusplus
  - script: setup.ps1
```

このままではプロビジョ二ングでタイムアウトエラーが発生してしまう。Powershell3.0以降は[以下のスクリプト](https://github.com/zaki-yama/win10-vm-with-vagrant-ansible/blob/master/ConfigureRemotingForAnsible.ps1)を実行する必要がある。

```
# https://github.com/ansible/ansible/blob/devel/examples/scripts/ConfigureRemotingForAnsible.ps1

# Configure a Windows host for remote management with Ansible
# -----------------------------------------------------------
#
# This script checks the current WinRM/PSRemoting configuration and makes the
# necessary changes to allow Ansible to connect, authenticate and execute
# PowerShell commands.
#
# Set $VerbosePreference = "Continue" before running the script in order to
# see the output messages.
# Set $SkipNetworkProfileCheck to skip the network profile check.  Without
# specifying this the script will only run if the device's interfaces are in
# DOMAIN or PRIVATE zones.  Provide this switch if you want to enable winrm on
# a device with an interface in PUBLIC zone.
#
# Written by Trond Hindenes <trond@hindenes.com>
# Updated by Chris Church <cchurch@ansible.com>
# Updated by Michael Crilly <mike@autologic.cm>
#
# Version 1.0 - July 6th, 2014
# Version 1.1 - November 11th, 2014
# Version 1.2 - May 15th, 2015

Param (
    [string]$SubjectName = $env:COMPUTERNAME,
    [int]$CertValidityDays = 365,
    [switch]$SkipNetworkProfileCheck,
    $CreateSelfSignedCert = $true
)

Function New-LegacySelfSignedCert
{
    Param (
        [string]$SubjectName,
        [int]$ValidDays = 365
    )

    $name = New-Object -COM "X509Enrollment.CX500DistinguishedName.1"
    $name.Encode("CN=$SubjectName", 0)

    $key = New-Object -COM "X509Enrollment.CX509PrivateKey.1"
    $key.ProviderName = "Microsoft RSA SChannel Cryptographic Provider"
    $key.KeySpec = 1
    $key.Length = 1024
    $key.SecurityDescriptor = "D:PAI(A;;0xd01f01ff;;;SY)(A;;0xd01f01ff;;;BA)(A;;0x80120089;;;NS)"
    $key.MachineContext = 1
    $key.Create()

    $serverauthoid = New-Object -COM "X509Enrollment.CObjectId.1"
    $serverauthoid.InitializeFromValue("1.3.6.1.5.5.7.3.1")
    $ekuoids = New-Object -COM "X509Enrollment.CObjectIds.1"
    $ekuoids.Add($serverauthoid)
    $ekuext = New-Object -COM "X509Enrollment.CX509ExtensionEnhancedKeyUsage.1"
    $ekuext.InitializeEncode($ekuoids)

    $cert = New-Object -COM "X509Enrollment.CX509CertificateRequestCertificate.1"
    $cert.InitializeFromPrivateKey(2, $key, "")
    $cert.Subject = $name
    $cert.Issuer = $cert.Subject
    $cert.NotBefore = (Get-Date).AddDays(-1)
    $cert.NotAfter = $cert.NotBefore.AddDays($ValidDays)
    $cert.X509Extensions.Add($ekuext)
    $cert.Encode()

    $enrollment = New-Object -COM "X509Enrollment.CX509Enrollment.1"
    $enrollment.InitializeFromRequest($cert)
    $certdata = $enrollment.CreateRequest(0)
    $enrollment.InstallResponse(2, $certdata, 0, "")

    # Return the thumbprint of the last installed certificate;
    # This is needed for the new HTTPS WinRM listerner we're
    # going to create further down.
    Get-ChildItem "Cert:\LocalMachine\my"| Sort-Object NotBefore -Descending | Select -First 1 | Select -Expand Thumbprint
}

# Setup error handling.
Trap
{
    $_
    Exit 1
}
$ErrorActionPreference = "Stop"

# Detect PowerShell version.
If ($PSVersionTable.PSVersion.Major -lt 3)
{
    Throw "PowerShell version 3 or higher is required."
}

# Find and start the WinRM service.
Write-Verbose "Verifying WinRM service."
If (!(Get-Service "WinRM"))
{
    Throw "Unable to find the WinRM service."
}
ElseIf ((Get-Service "WinRM").Status -ne "Running")
{
    Write-Verbose "Starting WinRM service."
    Start-Service -Name "WinRM" -ErrorAction Stop
}

# WinRM should be running; check that we have a PS session config.
If (!(Get-PSSessionConfiguration -Verbose:$false) -or (!(Get-ChildItem WSMan:\localhost\Listener)))
{
  if ($SkipNetworkProfileCheck) {
    Write-Verbose "Enabling PS Remoting without checking Network profile."
    Enable-PSRemoting -SkipNetworkProfileCheck -Force -ErrorAction Stop
  }
  else {
    Write-Verbose "Enabling PS Remoting"
    Enable-PSRemoting -Force -ErrorAction Stop
  }
}
Else
{
    Write-Verbose "PS Remoting is already enabled."
}

# Make sure there is a SSL listener.
$listeners = Get-ChildItem WSMan:\localhost\Listener
If (!($listeners | Where {$_.Keys -like "TRANSPORT=HTTPS"}))
{
    # HTTPS-based endpoint does not exist.
    If (Get-Command "New-SelfSignedCertificate" -ErrorAction SilentlyContinue)
    {
        $cert = New-SelfSignedCertificate -DnsName $SubjectName -CertStoreLocation "Cert:\LocalMachine\My"
        $thumbprint = $cert.Thumbprint
        Write-Host "Self-signed SSL certificate generated; thumbprint: $thumbprint"
    }
    Else
    {
        $thumbprint = New-LegacySelfSignedCert -SubjectName $SubjectName
        Write-Host "(Legacy) Self-signed SSL certificate generated; thumbprint: $thumbprint"
    }

    # Create the hashtables of settings to be used.
    $valueset = @{}
    $valueset.Add('Hostname', $SubjectName)
    $valueset.Add('CertificateThumbprint', $thumbprint)

    $selectorset = @{}
    $selectorset.Add('Transport', 'HTTPS')
    $selectorset.Add('Address', '*')

    Write-Verbose "Enabling SSL listener."
    New-WSManInstance -ResourceURI 'winrm/config/Listener' -SelectorSet $selectorset -ValueSet $valueset
}
Else
{
    Write-Verbose "SSL listener is already active."
}

# Check for basic authentication.
$basicAuthSetting = Get-ChildItem WSMan:\localhost\Service\Auth | Where {$_.Name -eq "Basic"}
If (($basicAuthSetting.Value) -eq $false)
{
    Write-Verbose "Enabling basic auth support."
    Set-Item -Path "WSMan:\localhost\Service\Auth\Basic" -Value $true
}
Else
{
    Write-Verbose "Basic auth is already enabled."
}

# Configure firewall to allow WinRM HTTPS connections.
$fwtest1 = netsh advfirewall firewall show rule name="Allow WinRM HTTPS"
$fwtest2 = netsh advfirewall firewall show rule name="Allow WinRM HTTPS" profile=any
If ($fwtest1.count -lt 5)
{
    Write-Verbose "Adding firewall rule to allow WinRM HTTPS."
    netsh advfirewall firewall add rule profile=any name="Allow WinRM HTTPS" dir=in localport=5986 protocol=TCP action=allow
}
ElseIf (($fwtest1.count -ge 5) -and ($fwtest2.count -lt 5))
{
    Write-Verbose "Updating firewall rule to allow WinRM HTTPS for any profile."
    netsh advfirewall firewall set rule name="Allow WinRM HTTPS" new profile=any
}
Else
{
    Write-Verbose "Firewall rule already exists to allow WinRM HTTPS."
}

# Test a remoting connection to localhost, which should work.
$httpResult = Invoke-Command -ComputerName "localhost" -ScriptBlock {$env:COMPUTERNAME} -ErrorVariable httpError -ErrorAction SilentlyContinue
$httpsOptions = New-PSSessionOption -SkipCACheck -SkipCNCheck -SkipRevocationCheck

$httpsResult = New-PSSession -UseSSL -ComputerName "localhost" -SessionOption $httpsOptions -ErrorVariable httpsError -ErrorAction SilentlyContinue

If ($httpResult -and $httpsResult)
{
    Write-Verbose "HTTP: Enabled | HTTPS: Enabled"
}
ElseIf ($httpsResult -and !$httpResult)
{
    Write-Verbose "HTTP: Disabled | HTTPS: Enabled"
}
ElseIf ($httpResult -and !$httpsResult)
{
    Write-Verbose "HTTP: Enabled | HTTPS: Disabled"
}
Else
{
    Throw "Unable to establish an HTTP or HTTPS remoting session."
}
Write-Verbose "PS Remoting has been successfully configured for Ansible."
```

これをConfigureRemotingForAnsible.ps1としてVagrantfileと同じ場所に保存。

VagrantfileのAnsibleブロックの前に以下を記述

```
config.vm.provision "shell" do |shell|
  shell.path = "ConfigureRemotingForAnsible.ps1"
end
```

これはvagrantのshell provisionerと呼ばれるものでホストOS側に用意したスクリプトをゲストOS側で実行させることができる。Windowsの場合はPowerShellスクリプトとなる。

##仮想環境のbox化
仮想環境のパッケージ化は`vagrant package`で実行できる




